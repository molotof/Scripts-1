#!/bin/bash
### Media Synchronizer ##########
# Version 0.2 by Scott Garrett  #
# Wintervenom <at> archlinux.us #
#################################

#dap_label="MicroDemon"
dap_label="PHILIPS"
sync_items=(
  "/home/wintervenom/Music/Playlists/Favorites.m3u"
  #"/home/wintervenom/Pictures/Artwork"
  #"/home/wintervenom/Pictures/Backgrounds"
  #"/home/wintervenom/Pictures/Funny"
  #"/home/wintervenom/Pictures/Photos"
  #"/home/wintervenom/Videos"
)
#sync_table=(
  #Format  Folder   Convert
#  'mp3     my_music'
#  'm4v     my_flix`'
#  'jpg     my_pix'
#  'mp4     my_flix'
#  '3gp     my_flix'
#  'wma     my_music'
#  'wmv     my_flix'
#  'ogg     my_music mp3'
#  'flac    my_music mp3'
#  'png     my_pix   jpg'
#  'bmp     my_pix   jpg'
#  'gif     my_pix   jpg'
#  'avi     my_flix  mp4'
#  'mpg     my_flix  mp4'
#  'mkv     my_flix  mp4'
#)
sync_table=(
  #Format  Folder   Convert
  'mp3     MUSIC'
  'm4v     VIDEO'
  'jpg     PICTURE'
  'mp4     VIDEO'
  '3gp     VIDEO'
  'wma     MUSIC'
  'wmv     VIDEO'
  'ogg     MUSIC    mp3'
  'flac    MUSIC    mp3'
  'png     PICTURE  jpg'
  'bmp     PICTURE  jpg'
  'gif     PICTURE  jpg'
  'avi     VIDEO    mp4'
  'mpg     VIDEO    mp4'
  'mkv     VIDEO    mp4'
)
tmp="/dev/shm/`basename "$0"`.tmp"
tmp_path="/tmp/$(basename "$0")"

get_name () {
  name="$1"
  echo "${name%.*}"
}

get_ext () {
  ext="$1"
  echo "${ext##*.}"
}

explode () {
  until [ -z "$1" ]; do
    echo "$1"
    shift
  done
}


if [ ! -h "/dev/disk/by-label/$dap_label" ]; then
  echo ">> DAP device '$dap_label' does not seem to be present."
  exit 1
fi

echo '>> Mounting DAP...'
dap_dev=`readlink -f "/dev/disk/by-label/$dap_label"`
if mount | grep -qF "$dap_dev on"; then
  dap_root=`mount | grep -F "$dap_dev on" | cut -d' ' -f3`
  echo "  - This device seems to already be mounted at '$dap_root'."
  echo '    Do you want to use this, instead (y/N)?'
  echo -n '    << '
  read -n1 confirm
  echo
  [ "$confirm" != 'y' ] && exit 1
else
  dap_root="/mnt/$dap_label"
  mkdir -p "$dap_root" "$tmp_path"
  if ! mount -o noatime,user "$dap_dev" "$dap_root"; then
    echo '  - Failed to mount device.'
    exit 1
  fi
  echo '  - Device mounted successfully.'
fi

rm "$dap_root/"*/*.mp3
for sync_item in "${sync_items[@]}"; do
  echo "<< $sync_item"
  [ -f "$tmp" ] && rm -f "$tmp"
  touch "$tmp"
  if [ -d "$sync_item" ]; then
    echo '>> Indexing directory...'
    find "$sync_item" -type f > $tmp
  elif [ -f "$sync_item" ]; then
    echo '>> Scanning playlist...'
    sort -R "$sync_item" | while read file; do
      [ "$file" = '#EXTM3U' ] && continue
      if [ -f "$file" ]; then
        echo "$file" >> $tmp
      elif [ -f "`dirname "$sync_item"`/$file" ]; then
        echo "`dirname "$sync_item"`/$file" ] >> $tmp
      else
        echo "  - Does not exist:  `basename "$file"`"
      fi
    done
  else
    echo '>> Item not found.'
  fi
  if [ `wc -l "$tmp" | cut -d' ' -f1` -lt 1 ]; then
    echo '  - No files found.'
    echo
    continue
  fi
  for sync_line in "${sync_table[@]}"; do
    sync_params=(`explode $sync_line`)
    echo ">> Scanning for files of type '${sync_params[0]}'..."
    cat "$tmp" | while read file; do
      file_name=`basename "$file"`
      file_format=`get_ext "$file_name"`
      dap_path="$dap_root/${sync_params[1]}"
      mkdir -p "$dap_path/Incomplete"
      if [ "$file_format" = "${sync_params[0]}" ]; then
        echo "  << `basename "$file"`"
        if [ "${sync_params[2]}" ]; then
          echo "  >> Copying (converting to '${sync_params[2]}')..."
          mkdir -p "$dap_path"
          case "${sync_params[2]}" in
            mp3)
              mutagen-inspect "$file" > "$tmp.tags"
              if [ ! -f "$dap_path/$file_name.mp3" ]; then
                ffmpeg -i "$file" -ab 192k "$tmp_path/$file_name.mp3"
                rsync --partial-dir="$dap_path/Incomplete" "$tmp_path/$file_name.mp3" "$dap_path/$file_name.mp3"
              else
                echo '    - File exists.'
              fi
            ;;
            jpg)
              if [ ! -f "$dap_path/$file_name.jpg" ]; then
                convert "$file" "$tmp_path/$file_name.jpg"
                rsync --partial-dir="$dap_path/Incomplete" "$tmp_path/$file_name.jpg" "$dap_path/$file_name.jpg"
              else
                echo '    - File exists.  Skipping.'
              fi
            ;;
            mp4)
              ffmpeg -i "$file" -acodec libfaac -ab 128k -ar 44100 -s 320x240 -r 24 -vcodec libx264 -vpre hq -vpre baseline -b 500k -bt 500k -threads 0 "$tmp_path/$file_name.mp4"
              rsync --partial-dir="$dap_path/Incomplete" "$tmp_path/$file_name.mp4" "$dap_path/$file_name.mp4"
              ffmpeg -i "$file" -s 320x240 -an -ss 00:00:10 -r 1 -vframes 1 "$tmp_path/$file_name.jpg"
              rsync --partial-dir="$dap_path/Incomplete" "$tmp_path/$file_name.jpg" "$dap_path/$file_name.jpg"
            ;;
            *)
              echo "  - Don't know how to convert this."
            ;;
          esac
        else
          echo '  >> Copying...'
          rsync --partial-dir="$dap_path/Incomplete" "$file" "$dap_path/$file_name"
        fi
      fi
    done
  done
  echo
done

rm -r "$dap_path/Incomplete"
echo '>> Flushing storage device caches...'
sync

echo '>> Unmounting DAP...'
umount "$dap_dev" &&
  echo '  - Done.' ||
  echo '  - Could not unmount device.'

echo '>> Cleaning up...'
rm "$tmp"
echo '>> Done.'
