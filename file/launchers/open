#!/bin/bash
### wvm-open: File/URL Launcher #######
# Version 20120217-6 by Scott Garrett #
# Wintervenom [(at)] archlinux.us     #
#######################################
# Dependencies:
# - bash >= 4.1
# - bsdtar
#
# Changelog:
# + 20120217-2
#   - Handlers and classes now written to configuration file, instead.
#   - Minor bug-fixes and corrections.
#   - Added option to create configuration and exit.
# + 20120217-3
#   - Fixed the built-in zip handler to deal with local files.
#   - Minor corrections.
# + 20120217-4
#   - Handle user options *after* loading configuration/overrides.
# + 20120217-5
#   - Change zip handler to deal with supported archives by default.
#   - Handle launching binary files and XDG shortcuts.
#   - Don't count option flags as part of the file list (oops).
#   - Fixed class-overrides not working.
#   - Extension classes will be used first before media type.
# + 10120217-6
#   - Fixed type-o punting Awk's stderr to /dev/null, breaking xDG handler.
#   - No more using space-delimited keys to assign multiple classes/exts,
#     for now, to make way for a better way of handling those.
#   - The built-in handlers and classes have been made default and the
#     extension classes re-instated instead of dumping them all in the
#     default config, so they won't get broken between updates anymore.
#     The user can override these in the configuration file.
#     *** Users of previous versions of wvm-open need to create a new
#     configuration file. ***
#   - Don't give a fatal error if a file didn't get recognized in the file
#     protocol.
#
# TODOs:
# + Plug-ins
#   - 'printf' shortcuts for URLs
#   - (keenerd) Handle multiple launchers.
shopt -s nocasematch
shopt -s extglob

# Curl connection timeout.
timeout=10

# Path to configuration file.
config="$HOME/.config/wvm-open/config"

# Path to temporary directory.
tmp="/tmp/wvm-open_$USER"

# Paths to XDG shortcut directories.
xdg_paths=(
    "$HOME/.local/share/applications"
    /usr/local/share/applications
    /usr/share/applications
)

# Let's not recurse our way to hell if the BROWSER env is set to this binary.
# (Modifying it here will not affect the variable outside of this script.)
[[ $BROWSER == ?(*/)"${0##*/}" ]] &&
    unset BROWSER

# Set BROWSER (if it isn't already set) depending on whether X is running.
# We'll check to see if X is actually running, too, because DISPLAY can be
# forced.
if [[ $DISPLAY ]] && pidof X > /dev/null; then
    BROWSER=${BROWSER:-firefox}
else
    BROWSER=${BROWSER:-elinks}
fi


#########################
### Handler Functions ###
#########################
wvm-open_file () {
    local handler file=$1
    if [[ -d "$file" ]]; then
        # Use the BROWSER if there's not a handler for directories.
        handler=$(handler_of 'dir') ||
            handler=$BROWSER
        # Prevent 'Inception' from happening in case someone was silly.
        [[ $handler == $FUNCNAME ]] &&
            handler=$BROWSER
        launch $handler "$file"
    else
        # If there's an executable of the same name in the current path,
        # give it dibs.
        [[ -x "./$file" ]] &&
            file="./$file"
        # Launch file directly if it is executable or in PATH.
        if [[ -x "$file" ]] || inpath "$file" > /dev/null; then
            launch "$file"
        else
            launch "$BROWSER" "$file"
        fi
    fi
}

wvm-open_shortcut () {
    local file shortcut name command
    if [[ -f "$1" ]]; then
        # Snip the command from the desktop shortcut.
        file=$(awk -F'=' '/^Exec/{sub(/ %.*$/, "", $2); print $2}' "$1")
    else
        # Case-insensetive search for a deskpot shortcut with a friendly
        # name that matches the query.
        query=${1,,}
        query=${query//\//\\\/}
        for shortcut in $(printf '%s/*.desktop\n' "${xdg_paths[@]}"); do
            # Awk: Only return the command if the name actually matched
            # in one of the files.
            file=$(awk -F'=' '
                $1 == "Name" {sub(/Name=/, "", $0); name=$0}
                $1 == "Exec" {sub(/Exec=/, "", $0); exec=$0}
                END {
                    if (tolower(name) !~ /'"$query"'/) exit
                    sub(/ %.*$/, "", exec)
                    print exec
                }
            ' "$shortcut" 2> /dev/null)
            [[ $file ]] &&
                break
        done
    fi
    if [[ $file ]]; then
        info "Opening '${file##*/}'..."
        launch $file
    else
        error "No '$query' shortcut found."
    fi
}

wvm-open_archive () {
    local file base contents filecount
    # Complain if bsdtar isn't installed.
    if ! inpath bsdtar > /dev/null; then
        error 'bsdtar not installed.'
        return 1
    # Otherwise, make sure input file isn't local.  If it's not, try to
    # download it.
    elif [[ ! -f "$1" ]]; then
        # If the input filename doesn't have a class for its file extension so
        # that we can name it something sane, try to get a suggested file name
        # from the server.
        ext_class "$1" || base=$(remote_name "$1")
        base=${base:-"${1##*/}"}
        file="tmp/${base:-"${1##*/}"}"
        # If the server doesn't give one, then just use the input filename.
        # Download the archive.
        info "Downloading '$base' to '$tmp'..."
        $curl --create-dirs -o "$file" "$1"
    fi
    # Extract the archive.
    file=${file:-"$1"}
    base=${base:-"${file##*/}"}
    contents="$tmp/$base.contents"
    mkdir -p "$contents"
    info "Extracting '$base'..."
    if bsdtar -xf "$file" -C "$contents"; then
        # If successful, count the files that have extensions.
        filecount=$(find "$contents" -name '*.*' -type f | wc -l)
        if [[ $filecount -le 2 ]]; then
            # If there are two or less, try to open them with the handler.
            exec "$self" "$contents"/*.*
        else
            # Otherwise, let the user browse the archive.
            info 'Too many files; launching directory browser...'
            launch $(handler_of 'dir') "$contents"
        fi
    else
        error "Failed to extract '$base'."
    fi
}



######################
### Core Functions ###
######################

# info [message]
# error [message]
# fatal [message]
# Displays a message to both the console and with the binary in <notify>,
# if it is set.  If <quiet> is set, will return without doing anything.
info () {
    [[ $quiet ]] &&
        return 0
    echo "$1" >&2
    [[ $notify ]] &&
        $notify -t 5000 "$1" &> /dev/null
}
error () {
    info "Error: ${1:-'Unexpected error.'}"
    return 1
}
fatal () {
    info "FATAL: ${1:-'Unexpected failure.'}"
    exit 1
}

# inpath <executable>
# Quietly returns, by status code, whether <executable> is in PATH.
inpath () {
    type -p "$1" > /dev/null
}

# remote_type <url>
# Fetch the media type of a file on an HTTP server.
remote_type () {
    $curl -I "$1" | awk -F'(:|;) ' '
        /^Content-Type/ {
            gsub(/\s/, "", $2)
            sub(/;.*$/, "", $2)
            print $2
        }
    '
}

# remote_name <url>
# Fetch the suggested name of a file on an HTTP server.
remote_name () {
    $curl -I "$1" | awk -F '(:|=)' '
        /^Content-Disposition/ {
            gsub(/^["\s]+/, "", $3)
            gsub(/["\s]+$/, "", $3)
            print $3
        }
    '
}

# match <query> <string> [string ...]
# Search for a query in one or more strings.
# Returns success exit code if found; error otherwise.
# The <string> variable is left alone for future convenience.
match () {
    for string in "${@:2}"; do
        [[ $1 == $string ]] &&
            return 0
    done
    return 1
}

# ext_class <path|file|extension>
# Return the defined class type mapped to a file extension.
# Also returns success exit code if a handler (that isn't 'default') was
# found; error otherwise.  A handler in <match_handler> gets dibs over
# If the argument is a path or file, the extension of it will be used.
ext_class () {
    local e=${1##*/} class
    for ext in "${!ext_class[@]}"; do
        if [[ ${e##*.} == $ext ]]; then
            echo "${ext_class["$ext"]}"
            return 0
        fi
    done
    echo "${ext_class['default']}"
    return 1
}

# handler_of <match|class>
# Returns the command defined to handle a match or class.
# Also returns success exit code if a handler (that isn't 'default') was
# found; error otherwise.  A handler in <match_handler> gets dibs over
# one in <class_handler>.
handler_of () {
    local string command
    for string in "${!match_handler[@]}"; do
        if [[ "$1" == $string ]]; then
            echo "${match_handler["$string"]}"
            return 0
        fi
    done
    if [[ -z $command ]]; then
        for string in "${!class_handler[@]}"; do
            if [[ "$1" == $string ]]; then
                echo "${class_handler["$string"]}"
                return 0
            fi
        done
    fi
    echo "${class_handler['default']}"
    return 1
}

# launch <command>
# Launches command.  If <no_detach> is set, will launch in the background,
# detached from the shell and terminal.  Functions will be exempt from this.
launch () {
    ftype=$(type -t "$1")
    # Return error if command not found.
    [[ -z $ftype ]] &&
        return 1
    if [[ $ftype != 'function' ]]; then
        # Just run the handler (and replace this process) if no_detach is set.
        [[ $no_detach ]] &&
            exec "$@"
        # Otherwise, pretend this is a non-interactive terminal (to keep
        # scripts that detect this incorrectly from breaking) and run the
        # handler in the background, detatched from the shell.
        export TERM='dumb'
        unset PS1
        "$@" </dev/null &>/dev/null & disown
    else
        # We don't want to detach handler functions.
        "$@"
    fi
}

# Writes default config file.
default_config () {
    mkdir -p "${config%/*}"
    cat <<'EOF' > "$config"
# vim: set filetype=sh ts=4 expandtab

# Curl timeout (default: 10)
#timeout=10

# Path to temporary directory.
#tmp="/tmp/wvm-open_$USER"

# Extra paths to XDG shortcut directories.
#xdg_paths+=("$HOME/Desktop")

# Open with <command|function> if a string in [<matches>] fits the URL or path.
#match_handler['*tinyurl.com/*']='firefox -no-remote -private'
#match_handler['*youtu@(.be/|be.com/@(watch|v))*']='ytdl-mplayer'

# Open [<classes>] with <command|function>.
#class_handler['*/@(ogg|octet-stream)']='urxvt -e mplayer'
#class_handler['*/@(text|css|plain)']='gvim'
#class_handler['*/msword']='libreoffice'
#class_handler['*/pdf */postscript']='zathura'
#class_handler['*/vnd.@(oasis|ms-|openxml)']='libreoffice'
#class_handler['@(audio|video)/*']='urxvt -e mplayer'
#class_handler['application/*zip ']='wvm-open_archive'
#class_handler['image/*']='mirage'
#class_handler['magnet']='qbittorrent'

# Map [<extensions>] to <class>.
#ext_class['example']='text/plain'
#ext_class['example2']='example_class'
#ext_class['default']='application/octet-stream'
EOF
    info "Configuration file created ($config)."
}

# Display all defined handlers.
show_handlers () {
    echo
    echo '### Match Handlers ###'
    for string in "${!match_handler[@]}"; do
        echo "  Matches: $strings"
        echo "  Handler: ${match_handler["$strings"]}"
        echo
    done
    echo
    echo '### Class Handlers ###'
    for string in "${!class_handler[@]}"; do
        echo "  Classes: $string"
        echo "  Handler: ${class_handler["$string"]}"
        echo
    done
    echo
    echo '### Extension Classes ###'
    for ext in "${!ext_class[@]}"; do
        echo "    Extns: $ext"
        echo "    Class: ${ext_class["$ext"]}"
        echo
    done
    exit 2
}

# Display usage text.
usage () {
    cat <<EOF
wvm-open: General-Purpose File and URL Launcher
Version $version by Scott Garrett
Wintervenom [(at)] archlinux.us

Syntax: ${self##*/} [options] <file|url> [file|url ...]
    -h      You are here.  ;)
    -k      Don't launch handler in the background
            nor disown the handler from the shell.
    -t      Force files/links to be handled as this
            match, media type, or class.
    -p      Force files/links to be handled as this
            protocol.
    -q      Be quiet.
    -c      Create initial configuation and exit.
    -v      Print currently-defined handlers.

Configuration:
    Stored in $config and sourced at
    run-time, can be used to override default handlers for
    path/URL matches, class handlers, and file extension-
    to-class map (extension classes).

    Match handlers allow you to launch an executable or a
    function if the path or URL matches a string.

    Class handlers launch an executable based on what class
    a file or URL is assigned to.  Classes can be either media
    types (e.g., 'text/plain' or 'image/jpeg'), protocol names
    (e.g., 'magnet', 'mailto' - but 'http'/'https' and 'file'
    are handled specially), or a custom name.  Custom classes
    need to be assigned an extension class if it is not a
    protocol.

    Extension classes are used to translate file extensions to
    classes.  They will be used first before trying to identify
    a file by its media type and using that as its class, so
    that you will be able to use custom class names without the
    media type class overriding them.

    As previously mentioned, the handlers can use Bash functions
    to open files and you can define those in the configuration
    file.  The built-in handler functions take care of archives
    (wvm-open_archive), XDG shortcuts (wvm-open_shortcut), and
    generic files, executables and directories (wvm-open_file).
    These can be overridden with in a match_handler.

    Match Handler Examples
        match_handler['string to match']='binary-or-function'
        # Handle YouTube video URLs with ytdl-mplayer.
        match_handler['*youtu@(.be/|be.com/@(watch|v))*']='ytdl-mplayer'
        # Handle files in 'special_files' or of the '.special'
        # type with some-app.
        match_handler['/home/bluh/special_files/* *.special']='some-app'

    Class Handler Example
        class_handler['class']='binary-or-function'
        # Match a media type...
        class_handler['text/*']='gvim'
        # ...or a protocol...
        class_handler['magnet']='qbittorrent'
        # ...or a custom class.
        class_handler['banana']='monkey'
        # Map to a handler function.
        class_handler['application/zip']='handle_zip'

    Extension Class Example
        ext_class['file_extension']='class-or-media-type'
        # Assign 'avi' as 'video/x-msvideo' media type.
        ext_class['avi']='video/x-msvideo'
        # Assign 'bz2' and 'tgz' to 'application/x-bzip'.
        ext_class['bz2']='application/x-bzip'
        ext_class['tz2']='application/x-bzip'
        # Assign 'peel' extensions to a custom class.
        ext_class['peel']='banana'
EOF
}



############
### Main ###
############
# Prevent odd behavior if these are set in the environment for some reason.
unset class protocol version
# Initialize handlers and classes.

# Open with <command|function> if a string in [<matches>] fits the URL or path.
declare -A match_handler

# Open [<classes>] with <command|function>.
declare -A class_handler=(
    ['default']='wvm-open_file'
    ['application/*zip']='wvm-open_archive'
    ['executable']='wvm-open_file'
    ['shortcut']='wvm-open_shortcut'
    ['windows_binary']='wine'
)

# Map [<extensions>] to <class>.
declare -A ext_class=(
    ['669']='audio/x-mod'
    ['ahx']='audio/x-mod'
    ['asc']='text/plain'
    ['asf']='video/x-ms-asf'
    ['asx']='video/x-ms-asf'
    ['avi']='video/x-msvideo'
    ['bz2']='application/x-bzip'
    ['cfg']='text/plain'
    ['class']='application/octet-stream'
    ['conf']='text/plain'
    ['cpp']='text/plain'
    ['css']='text/css'
    ['default']='application/octet-stream'
    ['desktop']='shortcut'
    ['doc']='application/msword'
    ['dtd']='text/xml'
    ['dvi']='application/x-dvi'
    ['exe']='windows_binary'
    ['flac']='audio/flac'
    ['flv']='video/x-flv'
    ['gif']='image/gif'
    ['gz']='application/x-gzip'
    ['htm']='text/html'
    ['html']='text/html'
    ['it']='audio/x-mod'
    ['jpeg']='image/jpeg'
    ['jpg']='image/jpeg'
    ['js']='text/javascript'
    ['log']='text/plain'
    ['m3u']='audio/x-mpegurl'
    ['mdz']='application/zip'
    ['med']='audio/x-mod'
    ['mod']='audio/x-mod'
    ['mov']='video/quicktime'
    ['mp3']='audio/mpeg'
    ['mp4']='video/mp4'
    ['mpeg']='video/mpeg'
    ['mpg']='video/mpeg'
    ['mtm']='audio/x-mod'
    ['odc']='application/vnd.oasis.opendocument.chart'
    ['odf']='application/vnd.oasis.opendocument.formula'
    ['odg']='application/vnd.oasis.opendocument.graphics'
    ['odi']='application/vnd.oasis.opendocument.image'
    ['odm']='application/vnd.oasis.opendocument.text-master'
    ['odp']='application/vnd.oasis.opendocument.presentation'
    ['ods']='application/vnd.oasis.opendocument.spreadsheet'
    ['odt']='application/vnd.oasis.opendocument.text'
    ['oga']='audio/ogg'
    ['ogg']='audio/ogg'
    ['ogv']='audio/ogg'
    ['otc']='application/vnd.oasis.opendocument.chart-template'
    ['otf']='application/vnd.oasis.opendocument.formula-template'
    ['otg']='application/vnd.oasis.opendocument.graphics-template'
    ['oth']='application/vnd.oasis.opendocument.text-web'
    ['oti']='application/vnd.oasis.opendocument.image-template'
    ['otp']='application/vnd.oasis.opendocument.presentation-template'
    ['ots']='application/vnd.oasis.opendocument.spreadsheet-template'
    ['ott']='application/vnd.oasis.opendocument.text-template'
    ['pac']='application/x-ns-proxy-autoconfig'
    ['pdf']='application/pdf'
    ['png']='image/png'
    ['ppt']='application/vnd.ms-powerpoint'
    ['ps']='application/postscript'
    ['qt']='video/quicktime'
    ['s3m']='audio/x-mod'
    ['s3z']='application/zip'
    ['sig']='application/pgp-signature'
    ['spec']='text/plain'
    ['spl']='application/futuresplash'
    ['stm']='audio/x-mod'
    ['swf']='application/x-shockwave-flash'
    ['tar']='application/x-tar'
    ['tbz']='application/x-bzip'
    ['text']='text/plain'
    ['tgz']='application/x-gzip'
    ['torrent']='application/x-bittorrent'
    ['txt']='text/plain'
    ['wav']='audio/x-wav'
    ['wax']='audio/x-ms-wax'
    ['wma']='audio/x-ms-wma'
    ['wmv']='video/x-ms-wmv'
    ['xbm']='image/x-xbitmap'
    ['xls']='application/vnd.ms-excel'
    ['xm']='audio/x-mod'
    ['xml']='text/xml'
    ['xmz']='application/zip'
    ['xpm']='image/x-xpixmap'
    ['xwd']='image/x-xwindowdump'
    ['z']='application/x-tar'
    ['zip']='application/zip'
)

# Internal variables for use by functions.
version=20120217-6
self=$0
curl="curl -s --netrc-optional --connect-timeout $timeout"
notify=$(type -p notify-send)

# Create a default configuration file if it is missing or empty.
if [[ ! -f "$config" ]] || [[ "$(stat -tc '%s' "$config")" -lt 5 ]]; then
    default_config
fi

# Load the configuration.
. "$config"

# Handle command-line options.
while getopts hvqkct:p: opt; do
    case "$opt" in
        t)
            class=$OPTARG
            ;;
        p)
            protocol=$OPTARG
            ;;
        k)
            no_detach=1
            ;;
        q)
            quiet=1
            ;;
        v)
            show_handlers
            ;;
        c)
            default_config
            exit 2
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))
# Display usage text if there aren't any arguments at all.
[[ -z $1 ]] &&
    usage

# If we're running in a non-interactive SSH session, set a DISPLAY so notices
# will still be displayed on the correct machine.
[[ $SSH_CLIENT && $- != *i* ]] &&
    DISPLAY=${x_display:-':0.0'}

# Add a user binary directory if one isn't present.
[[ $PATH != *"$HOME/bin"* ]] &&
    PATH+=":$HOME/bin"

for file in "$@"; do
    base=${file##*/}
    # If a class override hasn't been set...
    if [[ -z $class ]]; then
        # Figure out the protocol is being used in case the file is actually a
        # URL (and the user isn't overriding it).
        if [[ -z $protocol && $file =~ ':' ]]; then
            protocol=${file%%:*}
        else
            protocol=${protocol:-file}
        fi
        info "Identifying '$base'..."
        # Is there a match handler for the file path or URL?
        command=$(handler_of "$file") || unset command
        if [[ $command ]]; then
            # If so, take note of that.
            class='match'
        else
            # If not, then we need to figure out the class of the file.
            # First, let's try to get its media type.
            case "$protocol" in
                file)
                    file=${file##*:}
                    # If the file exists, grab that info from 'file'.
                    if [[ -f $file ]]; then
                        # See if there is an extension class, first, and, if
                        # not, use the media type.
                        class=$(ext_class "$file") ||
                            class=$(file -bN --mime-type "$file")
                    # Otherwise, maybe this file is actually dir or executable.
                    elif [[ -d "$file" ]] || inpath "$file" > /dev/null; then
                        info "Opening '$file'."
                        launch $(handler_of 'executable') "$file"
                        continue
                    # Or, maybe, it's a shortcut.
                    elif [[ $file != *'/'* ]]; then
                        launch $(handler_of 'shortcut') "$file"
                        continue
                    # Complain if we really can't tell that's what it is.
                    elif [[ ! ${file%%/*} =~ ^[[:alnum:]_.-]+$ ]]; then
                        error "'$file' isn't a file or valid URL.  You may need to prepend a protocol or need to force a class.'"
                        continue
                    fi
                    # If it made it this far, it was probably a URL, so...
                    # continue onto the next case action.
                    ;&
                @(http|https))
                    # If the previous case action found a class, skip this.
                    if [[ -z $class ]]; then
                        # Otherwise, note when we started and ask the server
                        # what class of file this is.  Try to use the remote
                        # file name's extension, first, but that won't work,
                        # ask for the media type, falling back to the original
                        # filename's extension.
                        start_time=$SECONDS
                        filename=$(remote_name "$file")
                        class=$(ext_class "${filename:-$file}") || {
                            mtype=$(remote_type "$file") &&
                                class=$mtype
                        }
                        # If it took more time than twice the timeout (once for
                        # each attempt to ask for the type and name from the
                        # server), the server is most likely down.
                        if ((SECONDS - start_time > timeout)); then
                            error "'$file' seems to be offline."
                            continue
                        fi
                    fi
                    ;;
                ftp)
                    # We can be lazy here and just use the file extension of
                    # the file.
                    class=$(ext_class "$file")
                    ;;
                *)
                    # If we don't know what protocol this path is, if it is a
                    # URL, set the class to the protocol and let a handler
                    # deal with it.
                    class=$protocol
                    ;;
            esac
        fi
    fi
    # Get the handler for whatever class we determined the file to be.
    command=${command:-"$(handler_of "$class")"}
    # Launch the rocket!
    info "Opening '$base' ($class) with '$command'."
    launch $command "$file"
done
