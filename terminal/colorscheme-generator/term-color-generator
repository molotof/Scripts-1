#!/usr/bin/env python2
### Terminal Color Generator ###
# Version 0.1 by Scott Garrett #
# Wintervenom [(at)] gmail.com #
################################
# Dependencies:
# - python-imaging (PIL)
#
from __future__ import print_function
from PIL import Image
import os
import random
import sys
import textwrap


VERSION = '0.1'


def fatal(text, eol="\n"):
    print(text, file=sys.stderr, end=eol)
    sys.stderr.flush()
    exit(1)


def usage():
    text = """
    Terminal Colorscheme Generator
    Version {} by Scott Garrett

    Syntax: {} /path/to/image
    """
    text = text.format(VERSION, os.path.basename(__file__))
    print(textwrap.dedent(text))
    exit(2)


def term_color(index, color):
    if isinstance(index, int):
        res = '*color{}'
    else:
        res = '*{}'
    return ': '.join((res, '#{:02X}{:02X}{:02X}')).format(index, *color)


def main():
    rng = random.SystemRandom()
    tint_map = (
        (-0, -0, -0),          # Black
        (-16, -0, -0),         # Red
        (-0, -16, -0),         # Green
        (-16, -16, -0),        # Yellow
        (-0, -0, -16),         # Blue
        (-16, -0, -16),        # Purple
        (-0, -16, -16),        # Cyan
        (-16, -16, -16),       # Gray

        (0, 0, 0),          # Black
        (16, 0, 0),         # Red
        (0, 16, 0),         # Green
        (16, 16, 0),        # Yellow
        (0, 0, 16),         # Blue
        (16, 0, 16),        # Purple
        (0, 16, 16),        # Cyan
        (16, 16, 16),       # Gray
    )

    # Lazily deal with user input bullshit.
    if len(sys.argv) < 2:
        usage()
    image_file = sys.argv[1]

    # Try to open image.
    if not os.path.exists(image_file):
        fatal('File not found.')
    try:
        im = Image.open(image_file)
    except:
        fatal('Cannot open file.')

    # Convert it to RGB colorspace.
    if im.mode != 'RGB':
        im = im.convert('RGB')
    # Use a thumbnail to save memory.
    im.thumbnail((256, 256))
    # Get colors from image that would be visible on a black terminal.
    max_colors = im.size[0] * im.size[1]
    colors = [c[1] for c in im.getcolors(max_colors) if sum(c[1]) > 100]
    # Sort by color values in a ghetto manner.
    colors.sort(key=sum)
    # Image needs to have at least sixteen colors (for now).
    if len(colors) < 16:
        fatal('Not enough colors in image (must be > 16).')
    # Choose sixteen random colors--half dark colors and half light colors--
    # to use for terminal text.
    half = int(len(colors) / 2)
    bg = (0, 0, 0)
    fg = rng.choice(colors[half + 1:])
    colors = rng.sample(colors[:half], 8) + rng.sample(colors[half + 1:], 8)
    # Sort chosen colors by value.
    colors.sort(key=sum)
    # Apply tinting to chosen colors to make them more distinguishable.
    colors = map(lambda a, b:
                 tuple(min(255, max(0, sum(c))) for c in zip(a, b)),
                 colors, tint_map)

    # Output the new termial colors in X resources format.
    print(term_color('background', bg))
    print(term_color('foreground', fg))
    for idx, color in enumerate(colors):
        print(term_color(idx, color))


if __name__ == '__main__':
    main()
