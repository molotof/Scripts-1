#!/usr/bin/env python3
### Update Local trees #############
# Ver. 20120207-2 by Scott Garrett #
# Wintervenom [(at)] archlinux.us  #
####################################

import glob
import os
import shutil
import sys
import subprocess
import datetime


root_dir = os.path.join(os.path.expanduser('~'), 'Projects')
tree = {
    'Configs': {
        'audio': {
            'mpd': (
                ('.config/mpd/mpd.conf', '(password +).*'),
            ),
        },
        'client': {
            'newsbeuter': (
                ('.config/newsbeuter/config', '((?:login|password) +).*')
            ),
            'mutt': (
                ('.muttrc', '((?:_pass|_url|_user|realname) *= *).*'),
            ),
            'rtorrent': (
                '.rtorrent.rc',
            ),
        },
        'file': {
            'ranger': (
                '.config/ranger/rc.conf',
                '.config/ranger/apps.py',
                '.config/ranger/options.py',
            ),
        },
        'shell': {
            'bash': (
                '.bashrc',
            ),
        },
        'status': {
            'i3status': (
                '.config/i3status/config',
            ),
            'xmobar': (
                '.config/xmobar/*',
            ),
        },
        'system': {
            'pacman': (
                '/etc/pacman.conf',
                '/etc/pacman.d/mirrorlist',
            )
        },
        'text': {
            'vim': (
                '.config/.vimrc',
            ),
            'zathura': (
                '.config/zathura/zathurarc',
            ),
        },
        'video': {
            'mplayer': (
                '.mplayer/*',
            ),
        },
        'web': {
            'pentadactyl': (
                '.pentadactylrc',
            ),
        },
        'wm': {
            'openbox': (
                '.config/openbox/*',
            ),
            'dwm': (
                '.config/.dwm/config.h',
            ),
            'herbstlufwm': (
                '.config/herbstluftwm/autostart',
                '.config/herbstluftwm/layouts',
            ),
            'i3': (
                '.config/i3/config',
            ),
        },
        'x11': (
            '.xbindkeysrc',
            '/etc/X11/xorg.conf',
            '.Xdefaults',
            '.fonts.conf',
        ),
    },
    'Scripts': {
        'audio': {
            'alsa': (
                'bin/volume',
            ),
            'mpd': {
                '': (
                    'bin/dmpc',
                    'bin/np',
                ),
                'mpc-utils': (
                    'bin/mpc-*',
                ),
                'relevant-track': (
                    'bin/relevant-track',
                    'bin/relevant-track-np',
                    'bin/relevant-track-weechat',
                ),
            },
        },
        'network': {
            'downloaders': (
                'bin/dl',
                'bin/vkdl',
                'bin/ytdl',
            ),
        },
        'file': {
            'backup': (
                'bin/backup',
                'bin/backup-system',
            ),
            'cleanup': (
                'bin/sample-dups',
                'bin/superclean',
            ),
            'helpers': (
                'bin/archive',
                'bin/extract',
            ),
            'organizers': (
                'bin/organize-by-*',
            ),
            'launchers': (
                'bin/dmenu-launch',
                'bin/firefox-launch',
                'bin/launch',
                'bin/mupen-launch',
                'bin/qemu-launch',
                'bin/uri-open',
                'bin/ytdl-mplayer',
            ),
        },
        'login': (
            'bin/login-action-menu',
            'bin/resume-screen',
            'bin/wm-session-manager',
            'bin/xlogin',
        ),
        'status': {
            '': (
                'bin/battery-monitor',
                'bin/osd',
            ),
            'barstatus': (
                'bin/barstatus',
                'bin/barstatus-*',
            ),
            'human-sysinfo': (
                'bin/human-*info',
            ),
            'xmobar': (
                'bin/xmobar-np-mpd',
                'bin/xmobar-wireless-info',
            ),
        },
        'utils': {
            'system': (
                'bin/rc',
                'bin/zimage-extract',
            ),
            'text': (
                'bin/tohex',
                'bin/urldecode',
                'bin/urlencode',
            ),
        },
        'toys': {
            '': (
                'bin/lottery',
                'bin/lucid',
                'bin/random-word',
                'bin/self-pong',
                'bin/tclock',
            ),
            'arch': (
                'bin/arch-splash',
                'bin/archlogo',
            ),
            'dangerous': (
                'bin/schizo',
            ),
        },
        'terminal': {
            'colorscheme-generator': (
                'bin/bg-scheme',
                'bin/term-color-generator',
            ),
            'tests': (
                'bin/colorblocks',
                'bin/colorcodes',
            ),
            'wrappers': (
                'bin/fbterm-tint',
            ),
        },
        'updaters': (
            'bin/update-*',
        ),
        'video': {
            'tv': (
                'bin/tv',
                'bin/tv-scan',
            ),
        },
        'wm': {
            'dwm': (
                'bin/dwm-recompile',
                'bin/dwm-session',
                'bin/dwm-update',
            ),
        },
        'herbstluftwm': (
            'bin/hlwm-*',
        ),
    },
}


def git(*args):
    """
    Lazy GIT call.
    """
    retcode = subprocess.call(('git',) + args)
    if retcode != 0:
        raise Exception('GIT failed with error {}.'.format(retcode))


def copy_tree(tree, root):
    """
    Copies file tree to proper paths defined in directory structure dict and
    redacts information from copied files, where specified.
    """
    if not isinstance(tree, dict):
        for src in tree:
            redact = None
            if not isinstance(src, str):
                src, redact = src
            if not src.startswith('/'):
                src = os.path.join(os.path.expanduser('~'), src)
            for src in glob.glob(src):
                try:
                    if not os.path.exists(root):
                        os.makedirs(root)
                    dest = os.path.join(root, os.path.basename(src))
                    if os.path.isdir(src):
                        shutil.copytree(src, dest)
                    else:
                        shutil.copy2(src, dest)
                    if redact:
                        redact = r's/{}/\1[redacted]/'.format(redact)
                        ret = subprocess.call(['sed', '-ri', redact, dest])
                        if ret != 0:
                            err = 'sed failed wih error {}.'.format(ret)
                            raise Exception(err)
                except (IOError, OSError, os.error, Exception) as err:
                    print('Error: {} ({} -> {})'.format(str(err), src, dest))
        return
    for directory, contents in tree.items():
        copy_tree(contents, os.path.join(root, directory))


def main():
    """
    Unadulterated laziness.  This is way simpler than checking everything for
    an update (since we have to possibly redact things, anyway).  It's still
    fast on Ext4 and any of the other cool FSes with delayed allocation.
    """
    print("Clearing old repo trees...")
    for directory in tree.keys():
        for path in glob.glob(os.path.join(root_dir, directory, '*')):
            if os.path.isdir(path):
                shutil.rmtree(path, True)

    print("Copying files to repo trees...")
    copy_tree(tree, root_dir)

    print("Pushing changes...")
    msg = '[Update %Y%m%d-%H%M%S]'
    if sys.argv[1:]:
        msg = ' '.join((msg, ' '.join(sys.argv[1:])))
    msg = datetime.datetime.today().strftime(msg)
    for directory in tree.keys():
        try:
            os.chdir(os.path.join(root_dir, directory))
            git('add', '.')
            git('commit', '-a', '-m', msg)
            git('push', 'origin', 'master')
        except (OSError, Exception) as err:
            print('Error: {}'.format(str(err)))


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\nAborted.")
