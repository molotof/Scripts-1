#!/usr/bin/env python3
# -*- coding: utf-8 -*-
### VK[ontakte] Audio Search ###
# V20110819-1 by Scott Garrett #
# Wintervenom [(at)] gmail.com #
################################

import html.parser
import http.client
import getopt
import itertools
import os
import re
import sys
import time
import urllib.parse


VERSION = '20110819-1'
BASENAME = os.path.basename(sys.argv[0])
TRACK_REGEX = re.compile(r"operate\((\w+),(\w+),(\w+),'(\w+)',(\w+)\);")
TITLE_REGEX = re.compile(r'<b id="performer\w+">(.*?)</b>.*?<span ' \
                         'id="title\w+">(?:<.*?>)?(.*?)(?:<.*?>)?</span>')
BITRATES = [8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 192,
            224, 256, 320]
CONNECTIONS = {
    'http': http.client.HTTPConnection,
    'https': http.client.HTTPSConnection
}


def stderr(message, newline=True):
    """ Write <message> to stderr. """
    print(message, file=sys.stderr, end="\n" if newline else '')
    sys.stderr.flush()


def getheader(header, headers, multiple=False):
    """ Return the value(s) of <header> in <headers>. """
    header = header.lower()
    if multiple:
        return [value for key, value in headers if key.lower() == header]
    for key, value in headers:
        if key.lower() == header:
            return value


def dehtml(text):
    """ Convert HTML to text. """
    h = html.parser.HTMLParser()
    return re.sub(r'\s+', ' ', h.unescape(text)).strip()


def timestamp(seconds):
    """ Converts seconds into hours, minutes, and seconds. """
    m, s = divmod(float(seconds), 60)
    h, m = divmod(m, 60)
    if h == 0:
        return '%d:%02.0f' % (m, s)
    return '%d:%02d:%02.0f' % (h, m, s)


class VKAudioSearch(object):
    def __init__(self, email, password):
        self.headers = {
            'Content-type': 'application/x-www-form-urlencoded',
            'Connection': 'close',
            'Accept': 'text/plain',
            'User-Agent': 'Mozilla/5.0 (X11; Linux; rv:5.0) ' \
                          'Gecko/20100101 Firefox/5.0'
        }
        self.params = {
            'act': 'login',
            'from_host': 'm.vk.com',
            'pda': '1',
            'to': '',
            'email': email,
            'pass': password
        }
        self.params = urllib.parse.urlencode(self.params).encode('cp1251')
        self.cookies = {}


    def savecookies(self, headers):
        """ Parse cookies in <headers> and store/update them. """
        for cookie in getheader('set-cookie', headers, True):
            cookie = cookie[:cookie.index(';')]
            name, sep, value = cookie.partition('=')
            self.cookies[name] = value
        cookies = ['{}={}'.format(k, v) for k, v in self.cookies.items()]
        self.headers['Cookie'] = '; '.join(cookies)


    def resetcookies(self):
        """ Clear stored cookies. """
        self.cookies = {}
        self.headers['Cookie'] = ''


    def request(self, url, body=None):
        """ Send a GET/POST request to <url>, save any cookies, and return
        the response. """
        if '//' not in url:
            url = 'http://{}'.format(url)
        url = urllib.parse.urlsplit(url)
        path = '{}?{}'.format(url.path if url.path != '' else '/', url.query)
        method = 'POST' if body else 'GET'
        connection = CONNECTIONS[url.scheme](url.netloc, timeout=10)
        connection.request(method, path, body, self.headers)
        response = connection.getresponse()
        self.savecookies(response.getheaders())
        return response


    def login(self):
        """ Log into VK[ontakte]; return True if successful. """
        stderr('Logging into VK...')
        self.resetcookies()
        response = self.request('https://login.vk.com', self.params)
        url = getheader('location', response.getheaders())
        if url and 's' in self.cookies:
            response = self.request(url)
            stderr('Authuntication successful.')
            return True
        stderr('ERROR: Authuntication failed.')
        return False


    def approxbitrate(self, url, length):
        """ Estimate the bitrate of MP3 at <url>. """
        size = getheader('content-length', self.request(url).getheaders())
        if size:
            size = int(size)
            bitrate = round(size * 8 / length / 1000)
            for guess in BITRATES:
                if bitrate * 0.9 < guess and bitrate * 1.1 > guess:
                    bitrate = guess
                    break
            return size, bitrate
        return 0, 0


    def search(self, query, max_results=10):
        """ Search VK[ontakte]'s audio section for <query>. """
        query = urllib.parse.quote_plus(query)
        matches = []
        max_results = max(1, max_results)
        max_offset = round(max_results, -2)
        results = 0
        offset = 0
        if not self.login():
            return None
        while offset <= max_offset:
            url = 'http://vk.com/gsearch.php?section=audio&q={}&offset={}'
            response = self.request(url.format(query, offset))
            url = getheader('location', response.getheaders())
            if url and 'security_check' in url:
                stderr('ERROR: Account security verification needed.')
                return None
            html = response.read().decode('cp1251')
            track_url = 'http://cs{}.vkontakte.ru/u{}/audio/{}.mp3'
            tracks = re.findall(TRACK_REGEX, html)
            titles = re.findall(TITLE_REGEX, html)
            stderr('Processing matches... ', False)
            if len(tracks) == 0:
                return matches
            if len(titles) != len(tracks):
                stderr('WARNING: Titles do not match tracks. Ignoring them.')
                titles = []
            zipped = itertools.zip_longest(tracks, titles, fillvalue='')
            for track, info in zipped:
                url = track_url.format(*track[1:4])
                artist, title = [dehtml(field) for field in info]
                size, bitrate = self.approxbitrate(url, int(track[4]))
                size = round(size / 1024 / 1024, 2)
                matches.append((artist, title, timestamp(track[4]), str(size),
                                str(bitrate), url))
                stderr('#', False)
                results += 1
                if results == max_results:
                    stderr('')
                    return matches
            stderr('')
            offset += 100
            time.sleep(1)
        return matches

def usage():
    text = """VK[ontakte] Audio Search
    Version {} by Scott Garrett

    Usage:

    """

def main():
    logins = [
        ('kopan9@mail.ru', '99999999'),
        ('awaken.seven@gmail.com', 'andersonbot'),
    ]
    args = sys.argv[1:3]
    if len(args) == 0:
        stderr('VK[ontakte] Audio Search')
        stderr('Version {0} by Scott Garrett'.format(VERSION))
        stderr('Usage: {0} [-n COUNT] QUERY'.format(BASENAME))
        sys.exit(1)
    elif len(args) == 2:
        try:
            max_results = int(args[0])
        except ValueError:
            stderr('-n argument must be a number.')
            sys.exit(1)
    else:
        max_results = 10
    query = args[-1]

    for username, password in logins:
        vk = VKAudioSearch(username, password)
        matches = vk.search(query, max_results)
        # Sort by bitrate, so the best ones are first.
        matches.sort(key=lambda column: column[4], reverse=True)
        if matches:
            for match in matches:
                print("\t".join(match))
            break
        else:
            stderr("Trying a different account...")
            time.sleep(2)


if __name__ == '__main__':
    main()
