#!/bin/sh
### Music Populator (Android) #####
# Ver 20120412-2 by Scott Garrett #
# Wintervenom [(at)] archlinux.us #
###################################

# Paths
host='http://demonpit.archlinux.tk:8000'
remote_list="$host/msync-list.php?c=ls"
remote_dir="$host/Music/Library"
music_dir='/mnt/sdcard/Music'
tmp_dir='/mnt/sdcard/.tmp'
list="$music_dir/.list"
wlan_state=/sys/class/net/eth0/operstate
vibrator=/sys/devices/virtual/timed_output/vibrator/enable

# Delay times (in seconds)
max_count=1500
tlfail_wait=60
dlfail_wait=15
wifi_wait=300
rescan_wait=7200

# Vibration times (in milliseconds)
rescan_vibrate=250
tldl_vibrate=250
filter_vibrate=500
alarm_vibrate=100
file_vibrate=100
move_vibrate=200
done_vibrate=1000


#############
# Functions #
#############
urldecode () {
    echo -e "$(sed 'y/+/ /;s/%/\\x/g')"
}

vibrate () {
    echo $1 > $vibrator
}

led () {
    if [ $blink ]; then
        kill $blink
        unset blink
    fi
    echo $1 > /sys/class/leds/button-backlight/brightness
}

led_blink () {
    led 0
    while :; do
        led 1
        sleep $1
        led 0
        sleep $1
    done &
    blink=$!
}

alarm () {
    led 0
    for n in 1 2 3 4 5 6 7 8 9 0; do
        led 1
        vibrate $alarm_vibrate
        led 0
        vibrate $alarm_vibrate
    done
}

wlan_up () {
    [ -f $wlan_state ] &&
        [ "$(cat "$wlan_state")" = 'up' ]
}

wait () {
    echo "$2; sleeping $1s."
    led 0
    v=$(($1 * 2))
    if [ $v -lt 1001 ]; then
        vibrate $v
    else
        vibrate 1000
    fi
    sleep $1
}



########
# Main #
########
while :; do
    if ! wlan_up; then
        wait $wifi_wait "Wi-Fi disconnected"
        continue
    fi
    mkdir -p "$music_dir" "$tmp_dir"
    if [ ! -f "$list.queue" ]; then
        echo 'Scanning music library...'
        led_blink 2
        vibrate $rescan_vibrate
        count=$(find "$music_dir" -type f \( -iname "*.mp3" -o \
            -iname "*.ogg" \) | wc -l)
        count=$((max_count - count))
        if [ $count -lt 1 ]; then
            wait $rescan_wait "Library populated"
            continue
        fi
        led_blink 1
        vibrate $tldl_vibrate
        skip_count=0
        [ -f "$list.skip" ] &&
            skip_count=$(wc -l < "$list.skip")
        while :; do
            if wget -O "$list.remote" "$remote_list"; then
                echo 'Filtering remote track list (1/2)...'
                led_blink 2
                vibrate $filter_vibrate
	        tmp_list="$list.remote"
                if [ $skip_count -gt 0 ]; then
                    tmp_list="$list.queue~"
	            grep -Fvf "$list.skip" "$list.remote" > "$tmp_list"
	        fi
                echo 'Filtering remote track list (2/2)...'
                vibrate $filter_vibrate
                head -n $count "$tmp_list" > "$list.queue"
                rm "$tmp_list" "$list.remote" 2> /dev/null
                break
            else
                alarm
                wait $tlfail_wait "Failed to get remote track list"
            fi
        done
    fi
    while read file; do
        c_file=$(echo "$file" | urldecode | sed 's:/: - :g' |
            tr -c '[:alnum:][:punct:] \n' '_')
        for n in 1 2 3; do
            led_blink 1
            vibrate $file_vibrate
            if [ -f "$music_dir/$c_file" ]; then
                echo "Skipping $file."
                echo "$file" >> "$list.skip"
                break
            elif wget -O "$tmp_dir/$c_file" "$remote_dir/$file"; then
                echo "Moving $c_file to music directory."
                led_blink 2
                vibrate $move_vibrate
                mv "$tmp_dir/$c_file" "$music_dir/"
                echo "$file" >> "$list.skip"
                break
            else
                alarm
                wait $dlfail_wait "Failed to download $file"
            fi
        done
        led 0
    done < "$list.queue"
    echo 'Done re-populating library.'
    rm "$list.queue"
    led 1
    vibrate $done_vibrate
    sleep 5
done